<?php

namespace Plugin\ShoppingMall\Repository;

use Eccube\Repository\AbstractRepository;
use Plugin\ShoppingMall\Entity\Shop;
use Symfony\Bridge\Doctrine\RegistryInterface;

/**
 * ShopRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ShopRepository extends AbstractRepository
{
    /**
     * ShopRepository constructor.
     *
     * @param RegistryInterface $registry
     */
    public function __construct(RegistryInterface $registry)
    {
        parent::__construct($registry, Shop::class);
    }

    /**
     * Shop create/update
     *
     * @param Shop $Shop
     *
     * @return bool
     *
     * @throws \Doctrine\ORM\NoResultException
     * @throws \Doctrine\ORM\NonUniqueResultException
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function save($Shop)
    {
        $em = $this->getEntityManager();

        if (!$Shop->getId()) {
            $sortNo = $this->createQueryBuilder('s')
                ->select('MAX(s.sort_no)')
                ->getQuery()
                ->getSingleScalarResult();
            if (!$sortNo) {
                $sortNo = 0;
            }
            $Shop->setSortNo($sortNo + 1);

            $em->createQueryBuilder()
                ->update(Shop::class, 's')
                ->set('s.sort_no', 's.sort_no + 1')
                ->where('s.sort_no > :sort_no')
                ->setParameter('sort_no', $sortNo)
                ->getQuery()
                ->execute();
        }

        $em->persist($Shop);
        $em->flush($Shop);

        return true;
    }

    /**
     * Delete maker.
     *
     * @param Shop $Shop
     *
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function delete($Shop)
    {
        $em = $this->getEntityManager();
        $em->remove($Shop);
        $em->flush($Shop);
    }

    /**
     * Move sortNo.
     *
     * @param array $sortNos
     *
     * @return array
     *
     * @throws \Doctrine\ORM\OptimisticLockException
     * @throws \Doctrine\ORM\ORMException
     */
    public function moveSortNo(array $sortNos)
    {
        $results = [];
        foreach ($sortNos as $id => $sortNo) {
            /* @var $Shop Shop */
            $Shop = $this->find($id);
            if ($Shop->getSortNo() == $sortNo) {
                continue;
            }
            $results[$id] = $sortNos;
            $Shop->setSortNo($sortNo);
            $this->getEntityManager()->persist($Shop);
            $this->getEntityManager()->flush($Shop);
        }

        return $results;
    }
}
